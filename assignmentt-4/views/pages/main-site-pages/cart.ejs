<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<div class="container mt-5">
    <h1 class="mb-4 text-center">Shopping Cart</h1>

    <% if (products && products.length > 0) { %>
    <!-- Table for Products -->
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Picture</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <% products.forEach(product => { %>
                    <tr data-product-id="<%= product._id %>">
                    <td><%= product.name %></td>
                        <td class="product-price">$<%= product.price.toFixed(2) %></td>
                    <td><%= product.category %></td>
                    <td><img src="/<%= product.picture %>" class="img-thumbnail" alt="Product Image" style="max-width: 100px;"></td>
                        <td>
                            <input type="number" min="1" value="<%= product.quantity %>" 
                                   class="form-control quantity-input" 
                                   data-product-id="<%= product._id %>"
                                   data-price="<%= product.price %>"
                                   style="width: 70px;">
                        </td>
                        <td class="product-total">$<%= product.total.toFixed(2) %></td>
                        <td>
                            <button class="btn btn-danger btn-sm remove-item" data-product-id="<%= product._id %>">
                                Remove
                            </button>
                        </td>
                    </tr>
                <% }) %>
                <tr class="cart-total-row">
                    <td colspan="4"></td>
                    <td><strong>Cart Total:</strong></td>
                    <td colspan="2"><strong class="cart-total">$<%= cartTotal.toFixed(2) %></strong></td>
                </tr>
        </tbody>
    </table>

        <div class="text-center mt-4 mb-5">
            <button type="button" class="btn btn-primary btn-lg checkout-btn">
                <i class="fas fa-shopping-cart mr-2"></i>
                Proceed to Checkout
            </button>
        </div>

        <!-- Shipping Form -->
        <div class="checkout-form shipping-form">
            <h3 class="mb-4">
                <i class="fas fa-shipping-fast mr-2"></i>
                Shipping Information
            </h3>
            <form id="shipping-form" class="needs-validation" novalidate>
                <div class="form-group">
                    <label>
                        <i class="fas fa-user mr-2"></i>
                        Full Name
                    </label>
                    <input type="text" name="fullName" class="form-control" required>
                    <div class="invalid-feedback">Please enter your full name</div>
                </div>
                <div class="form-group">
                    <label>
                        <i class="fas fa-map-marker-alt mr-2"></i>
                        Address
                    </label>
                    <input type="text" name="address" class="form-control" required>
                    <div class="invalid-feedback">Please enter your address</div>
                </div>
                <div class="form-group">
                    <label>
                        <i class="fas fa-city mr-2"></i>
                        City
                    </label>
                    <input type="text" name="city" class="form-control" required>
                    <div class="invalid-feedback">Please enter your city</div>
                </div>
                <div class="form-group">
                    <label>
                        <i class="fas fa-phone mr-2"></i>
                        Phone
                    </label>
                    <input type="tel" name="phone" class="form-control" pattern="[0-9]{10,11}" required>
                    <div class="invalid-feedback">Please enter a valid phone number</div>
                </div>
                <button type="submit" class="btn btn-primary btn-block mt-4">
                    Continue to Payment
                    <i class="fas fa-arrow-right ml-2"></i>
                </button>
            </form>
        </div>

        <!-- Payment Form -->
        <div class="checkout-form payment-form">
            <h3 class="mb-4">
                <i class="fas fa-credit-card mr-2"></i>
                Payment Information
            </h3>
            <form id="payment-form">
                <div class="payment-methods mb-4">
                    <h5>Select Payment Method</h5>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard" value="credit" checked>
                        <label class="form-check-label" for="creditCard">
                            <i class="fas fa-credit-card mr-2"></i>
                            Credit/Debit Card
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery" value="cod">
                        <label class="form-check-label" for="cashOnDelivery">
                            <i class="fas fa-money-bill-wave mr-2"></i>
                            Cash on Delivery
                        </label>
                    </div>
                </div>

                <div id="card-payment-section">
                    <div class="form-group">
                        <label>Card Number</label>
                        <input type="text" name="cardNumber" class="form-control" placeholder="1234 5678 9012 3456" maxlength="19">
                        <div class="invalid-feedback">Please enter a valid card number</div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Expiry Date</label>
                                <input type="text" name="expiryDate" class="form-control" placeholder="MM/YY" maxlength="5">
                                <div class="invalid-feedback">Please enter a valid expiry date</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>CVV</label>
                                <input type="password" name="cvv" class="form-control" placeholder="123" maxlength="4">
                                <div class="invalid-feedback">Please enter a valid CVV</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="order-summary mt-4">
                    <h5>Order Summary</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span>$<%= cartTotal.toFixed(2) %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Shipping:</span>
                        <span>$<%= (cartTotal >= 100 ? 0 : 10).toFixed(2) %></span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between">
                        <strong>Total:</strong>
                        <strong>$<%= (cartTotal + (cartTotal >= 100 ? 0 : 10)).toFixed(2) %></strong>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary btn-block mt-4">
                    <span class="button-text">Place Order</span>
                    <div class="spinner-border spinner-border-sm ml-2" role="status" style="display: none;"></div>
                </button>
            </form>
        </div>

        <!-- Order Confirmation -->
        <div class="checkout-form confirmation-form">
            <div class="text-center">
                <i class="fas fa-check-circle text-success mb-4" style="font-size: 4rem;"></i>
                <h3>Order Confirmed!</h3>
                <p class="lead">Thank you for your purchase</p>
                <div class="order-details mt-4">
                    <p>Order Number: <strong id="order-number"></strong></p>
                    <p>A confirmation email has been sent to your email address.</p>
                </div>
                <a href="/" class="btn btn-primary mt-4">
                    <i class="fas fa-shopping-cart mr-2"></i>
                    Continue Shopping
                </a>
            </div>
        </div>

    <% } else { %>
        <div class="text-center">
            <h3>Your cart is empty</h3>
            <a href="/" class="btn btn-primary mt-3">Continue Shopping</a>
        </div>
    <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get all form elements
    const checkoutBtn = document.querySelector('.checkout-btn');
    const shippingForm = document.querySelector('.shipping-form');
    const paymentForm = document.querySelector('.payment-form');
    const confirmationForm = document.querySelector('.confirmation-form');
    const cardPaymentSection = document.getElementById('card-payment-section');
    
    // Hide all forms initially
    [shippingForm, paymentForm, confirmationForm].forEach(form => {
        if (form) form.style.display = 'none';
    });

    // Proceed to Checkout
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', function() {
            checkoutBtn.style.display = 'none';
            showForm(shippingForm);
        });
    }

    // Handle shipping form submission
    const shippingFormEl = document.getElementById('shipping-form');
    if (shippingFormEl) {
        shippingFormEl.addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (validateShippingForm(this)) {
                const shippingData = getShippingData(this);
                sessionStorage.setItem('shippingDetails', JSON.stringify(shippingData));
                hideForm(shippingForm);
                showForm(paymentForm);
            }
        });
    }

    // Payment method toggle
    const paymentMethodInputs = document.querySelectorAll('input[name="paymentMethod"]');
    paymentMethodInputs.forEach(input => {
        input.addEventListener('change', function() {
            cardPaymentSection.style.display = this.value === 'credit' ? 'block' : 'none';
        });
    });

    // Handle payment form submission
    const paymentFormEl = document.getElementById('payment-form');
    if (paymentFormEl) {
    paymentFormEl.addEventListener('submit', async function(e) {
        e.preventDefault();
        
            const submitButton = this.querySelector('button[type="submit"]');
            const buttonText = submitButton.querySelector('.button-text');
            const spinner = submitButton.querySelector('.spinner-border');

        try {
            submitButton.disabled = true;
            buttonText.textContent = 'Processing...';
            spinner.style.display = 'inline-block';

                if (await processPayment(this)) {
                    hideForm(paymentForm);
                    showForm(confirmationForm);
                    document.querySelector('.table').style.display = 'none';
                }
            } catch (error) {
                alert('Error processing payment: ' + error.message);
            } finally {
                submitButton.disabled = false;
                buttonText.textContent = 'Place Order';
                spinner.style.display = 'none';
            }
        });
    }

    // Helper functions
    function showForm(form) {
        if (form) {
            form.style.display = 'block';
            setTimeout(() => form.classList.add('form-visible'), 10);
            form.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }

    function hideForm(form) {
        if (form) {
            form.classList.remove('form-visible');
            setTimeout(() => form.style.display = 'none', 300);
        }
    }

    function validateShippingForm(form) {
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            return false;
        }
        return true;
    }

    function getShippingData(form) {
        return {
            fullName: form.querySelector('input[name="fullName"]').value.trim(),
            address: form.querySelector('input[name="address"]').value.trim(),
            city: form.querySelector('input[name="city"]').value.trim(),
            phone: form.querySelector('input[name="phone"]').value.trim()
        };
    }

    async function processPayment(form) {
        const paymentMethod = form.querySelector('input[name="paymentMethod"]:checked').value;
            const shippingDetails = JSON.parse(sessionStorage.getItem('shippingDetails'));
            
            if (!shippingDetails) {
                throw new Error('Shipping details not found');
            }

            const paymentDetails = {
                method: paymentMethod,
                ...(paymentMethod === 'credit' && {
                cardNumber: form.querySelector('input[name="cardNumber"]').value.replace(/\s/g, ''),
                expiryDate: form.querySelector('input[name="expiryDate"]').value,
                cvv: form.querySelector('input[name="cvv"]').value
                })
            };

            const response = await fetch('/create-order', {
                method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ shippingDetails, paymentDetails })
            });

            const result = await response.json();
            
            if (result.success) {
                sessionStorage.removeItem('shippingDetails');
                document.getElementById('order-number').textContent = result.orderNumber;
            return true;
            } else {
                throw new Error(result.error || 'Failed to create order');
            }
    }

    // Quantity update handling
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', async function() {
            const quantity = parseInt(this.value);
            const productId = this.dataset.productId;
            const price = parseFloat(this.dataset.price);
            
            if (quantity < 1) {
                this.value = 1;
                return;
            }

            try {
                const response = await fetch(`/update-cart-quantity/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ quantity })
                });

                if (response.ok) {
                    // Update row total
                    const row = this.closest('tr');
                    const totalCell = row.querySelector('.product-total');
                    const rowTotal = price * quantity;
                    totalCell.textContent = `$${rowTotal.toFixed(2)}`;

                    // Update cart total
                    updateCartTotal();
                } else {
                    throw new Error('Failed to update quantity');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to update quantity');
                // Reset to previous value
                this.value = this.defaultValue;
            }
        });
    });

    // Remove item handling
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', async function() {
            const productId = this.dataset.productId;
            try {
                const response = await fetch(`/remove-from-cart/${productId}`, {
                    method: 'POST'
                });
                if (response.ok) {
                    // Remove the row
                    this.closest('tr').remove();
                    // Update cart total
                    updateCartTotal();
                    // If cart is empty, reload page
                    if (document.querySelectorAll('tbody tr').length <= 1) {
                        location.reload();
                    }
                } else {
                    throw new Error('Failed to remove item');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to remove item from cart');
            }
        });
    });

    // Function to update cart total
    function updateCartTotal() {
        const rows = document.querySelectorAll('tbody tr:not(.cart-total-row)');
        let total = 0;

        rows.forEach(row => {
            const totalCell = row.querySelector('.product-total');
            if (totalCell) {
                total += parseFloat(totalCell.textContent.replace('$', ''));
            }
        });

        // Update cart total display
        const cartTotalElement = document.querySelector('.cart-total');
        if (cartTotalElement) {
            cartTotalElement.textContent = `$${total.toFixed(2)}`;
        }

        // Update order summary if it exists
        const orderSummarySubtotal = document.querySelector('.order-summary .d-flex:first-child span:last-child');
        const orderSummaryTotal = document.querySelector('.order-summary .d-flex:last-child strong:last-child');
        if (orderSummarySubtotal && orderSummaryTotal) {
            orderSummarySubtotal.textContent = `$${total.toFixed(2)}`;
            const shipping = total >= 100 ? 0 : 10;
            orderSummaryTotal.textContent = `$${(total + shipping).toFixed(2)}`;
        }
    }

    // Add input validation to prevent negative numbers
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('input', function() {
            if (this.value < 1) {
                this.value = 1;
            }
        });
    });
});
</script>

<style>
.checkout-form {
    display: none;
    max-width: 600px;
    margin: 20px auto;
    padding: 30px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 15px rgba(0,0,0,0.1);
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease;
}

.form-visible {
    opacity: 1 !important;
    transform: translateY(0) !important;
}

.checkout-btn {
    padding: 15px 30px;
    font-size: 1.2rem;
    background-color: #007bff;
    border: none;
    transition: all 0.3s ease;
}

.checkout-btn:hover {
    background-color: #0056b3;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-control {
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    transition: all 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
}

.order-summary {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 6px;
    margin-top: 30px;
}

.payment-methods {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 6px;
    margin-bottom: 20px;
}

.btn-block {
  width: 100%;
    padding: 12px;
}

.invalid-feedback {
    color: #dc3545;
    font-size: 80%;
    margin-top: 5px;
}

.confirmation-form i.fa-check-circle {
    color: #28a745;
    font-size: 5rem;
    margin-bottom: 20px;
}

/* Animation classes */
.fade-enter {
    opacity: 0;
    transform: translateY(20px);
}

.fade-enter-active {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.3s ease;
}
</style>